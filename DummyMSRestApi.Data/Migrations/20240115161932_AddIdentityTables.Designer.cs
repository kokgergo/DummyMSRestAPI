// <auto-generated />
using System;
using DummyMSRestApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DummyMSRestApi.Migrations
{
    [DbContext(typeof(DummyMSRestDbContext))]
    [Migration("20240115161932_AddIdentityTables")]
    partial class AddIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DummyMSRestApi.Data.LineData<DummyMSRestApi.Data.TimeFields>", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("createdByid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("createdDateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastModifiedDateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("webUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("createdByid");

                    b.ToTable("timeDatas");

                    b.HasData(
                        new
                        {
                            id = "1",
                            createdByid = "1",
                            createdDateTime = "2024. 01. 15. 17:19:32",
                            lastModifiedDateTime = "2024. 01. 15. 17:19:32",
                            webUrl = ""
                        },
                        new
                        {
                            id = "2",
                            createdByid = "1",
                            createdDateTime = "2024. 01. 15. 17:19:32",
                            lastModifiedDateTime = "2024. 01. 15. 17:19:32",
                            webUrl = ""
                        },
                        new
                        {
                            id = "3",
                            createdByid = "1",
                            createdDateTime = "2024. 01. 15. 17:19:32",
                            lastModifiedDateTime = "2024. 01. 15. 17:19:32",
                            webUrl = ""
                        });
                });

            modelBuilder.Entity("DummyMSRestApi.Data.LineData<DummyMSRestApi.Data.TypeFields>", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("createdByid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("createdDateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastModifiedDateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("webUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("createdByid");

                    b.ToTable("typeDatas");

                    b.HasData(
                        new
                        {
                            id = "1",
                            createdByid = "1",
                            createdDateTime = "2024. 01. 15. 17:19:32",
                            lastModifiedDateTime = "2024. 01. 15. 17:19:32",
                            webUrl = ""
                        },
                        new
                        {
                            id = "2",
                            createdByid = "1",
                            createdDateTime = "2024. 01. 15. 17:19:32",
                            lastModifiedDateTime = "2024. 01. 15. 17:19:32",
                            webUrl = ""
                        });
                });

            modelBuilder.Entity("DummyMSRestApi.Data.UserType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "100db7ec-73de-4763-84fd-61f54dbaea1a",
                            Email = "dummy@bosch.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0817f1f0-3c6a-48a9-b60e-bee75b9036f6",
                            TwoFactorEnabled = false,
                            displayName = "Dummy1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DummyMSRestApi.Data.LineData<DummyMSRestApi.Data.TimeFields>", b =>
                {
                    b.HasOne("DummyMSRestApi.Data.UserType", "createdBy")
                        .WithMany("timeDatas")
                        .HasForeignKey("createdByid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DummyMSRestApi.Data.TimeFields", "fields", b1 =>
                        {
                            b1.Property<string>("LineDataid")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("ESS")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EntryStart")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EntryStop")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EntryType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("id")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LineDataid");

                            b1.ToTable("timeDatas");

                            b1.WithOwner()
                                .HasForeignKey("LineDataid");

                            b1.HasData(
                                new
                                {
                                    LineDataid = "1",
                                    ESS = "false",
                                    EntryStart = "2024. 01. 15. 12:19:32",
                                    EntryStop = "2024. 01. 15. 17:19:32",
                                    EntryType = "Dummy1",
                                    id = "1"
                                },
                                new
                                {
                                    LineDataid = "2",
                                    ESS = "false",
                                    EntryStart = "2024. 01. 15. 11:19:32",
                                    EntryStop = "2024. 01. 15. 12:19:32",
                                    EntryType = "Dummy1",
                                    id = "2"
                                },
                                new
                                {
                                    LineDataid = "3",
                                    ESS = "false",
                                    EntryStart = "2024. 01. 15. 9:19:32",
                                    EntryStop = "2024. 01. 15. 11:19:32",
                                    EntryType = "Dummy2",
                                    id = "3"
                                });
                        });

                    b.Navigation("createdBy");

                    b.Navigation("fields");
                });

            modelBuilder.Entity("DummyMSRestApi.Data.LineData<DummyMSRestApi.Data.TypeFields>", b =>
                {
                    b.HasOne("DummyMSRestApi.Data.UserType", "createdBy")
                        .WithMany("typeDatas")
                        .HasForeignKey("createdByid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DummyMSRestApi.Data.TypeFields", "fields", b1 =>
                        {
                            b1.Property<string>("LineDataid")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("PreferedOreder")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SAPCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("id")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LineDataid");

                            b1.ToTable("typeDatas");

                            b1.WithOwner()
                                .HasForeignKey("LineDataid");

                            b1.HasData(
                                new
                                {
                                    LineDataid = "1",
                                    PreferedOreder = "1",
                                    SAPCode = "0100",
                                    Title = "Dummy1",
                                    id = "1"
                                },
                                new
                                {
                                    LineDataid = "2",
                                    PreferedOreder = "2",
                                    SAPCode = "0200",
                                    Title = "Dummy2",
                                    id = "2"
                                });
                        });

                    b.Navigation("createdBy");

                    b.Navigation("fields");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DummyMSRestApi.Data.UserType", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DummyMSRestApi.Data.UserType", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DummyMSRestApi.Data.UserType", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DummyMSRestApi.Data.UserType", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DummyMSRestApi.Data.UserType", b =>
                {
                    b.Navigation("timeDatas");

                    b.Navigation("typeDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
